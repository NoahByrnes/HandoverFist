import SwiftUI
import Vision
import VisionKit
import OpenAISwift

struct ContentView: View {
    @State private var selectedImage: UIImage?
    @State private var extractedText: String = ""
    @State private var calorieCount: Int = 0
    @State private var isShowingImagePicker = false
    @State private var foodItems: [FoodItem] = []
    
    private let openAI = OpenAISwift(authToken: "YOUR_OPENAI_API_KEY")
    private let fatSecretAPI = FatSecretAPI(clientID: "758a09e5d9704037a59872d6407c671e", clientSecret: "f4fc9672e0b544ac9bc01d99471579c2")
    
    var body: some View {
        VStack {
            if let image = selectedImage {
                Image(uiImage: image)
                    .resizable()
                    .scaledToFit()
            } else {
                Text("No image selected")
            }
            
            Button("Select Image") {
                isShowingImagePicker = true
            }
            
            Button("Analyze Image") {
                if let image = selectedImage {
                    analyzeImage(image)
                }
            }
            
            Text("Extracted Text: \(extractedText)")
            Text("Estimated Calories: \(calorieCount)")
            
            List(foodItems) { item in
                VStack(alignment: .leading) {
                    Text(item.name)
                    Text("Calories: \(item.calories)")
                }
            }
        }
        .padding()
        .sheet(isPresented: $isShowingImagePicker) {
            ImagePicker(image: $selectedImage)
        }
    }
    
    func analyzeImage(_ image: UIImage) {
        guard let cgImage = image.cgImage else { return }
        
        let requestHandler = VNImageRequestHandler(cgImage: cgImage, options: [:])
        let request = VNRecognizeTextRequest { request, error in
            guard let observations = request.results as? [VNRecognizedTextObservation] else { return }
            
            let recognizedStrings = observations.compactMap { observation in
                observation.topCandidates(1).first?.string
            }
            
            extractedText = recognizedStrings.joined(separator: " ")
            identifyFoodItems(from: extractedText)
        }
        
        do {
            try requestHandler.perform([request])
        } catch {
            print("Failed to perform text recognition: \(error)")
        }
    }
    
    func identifyFoodItems(from text: String) {
        openAI.sendCompletion(with: "Identify food items and their quantities from this text: \(text)", model: .gpt3(.davinci), maxTokens: 60) { result in
            switch result {
            case .success(let success):
                let foodItems = success.choices.map { $0.text.trimmingCharacters(in: .whitespacesAndNewlines) }
                searchFoodItems(foodItems)
            case .failure(let error):
                print("OpenAI API error: \(error)")
            }
        }
    }
    
    func searchFoodItems(_ items: [String]) {
        for item in items {
            fatSecretAPI.searchFood(query: item) { result in
                switch result {
                case .success(let foods):
                    if let food = foods.first {
                        let foodItem = FoodItem(id: food.foodId, name: food.foodName, calories: food.calories)
                        DispatchQueue.main.async {
                            self.foodItems.append(foodItem)
                            self.calorieCount += food.calories
                        }
                    }
                case .failure(let error):
                    print("FatSecret API error: \(error)")
                }
            }
        }
    }
}

struct FoodItem: Identifiable {
    let id: String
    let name: String
    let calories: Int
}

struct ImagePicker: UIViewControllerRepresentable {
    @Binding var image: UIImage?
    @Environment(\.presentationMode) private var presentationMode
    
    func makeUIViewController(context: UIViewControllerRepresentableContext<ImagePicker>) -> UIImagePickerController {
        let picker = UIImagePickerController()
        picker.delegate = context.coordinator
        return picker
    }
    
    func updateUIViewController(_ uiViewController: UIImagePickerController, context: UIViewControllerRepresentableContext<ImagePicker>) {}
    
    func makeCoordinator() -> Coordinator {
        Coordinator(self)
    }
    
    class Coordinator: NSObject, UINavigationControllerDelegate, UIImagePickerControllerDelegate {
        let parent: ImagePicker
        
        init(_ parent: ImagePicker) {
            self.parent = parent
        }
        
        func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
            if let uiImage = info[.originalImage] as? UIImage {
                parent.image = uiImage
            }
            parent.presentationMode.wrappedValue.dismiss()
        }
    }
}

class FatSecretAPI {
    private let clientID: String
    private let clientSecret: String
    private var accessToken: String?
    private var tokenExpirationDate: Date?
    
    init(clientID: String, clientSecret: String) {
        self.clientID = clientID
        self.clientSecret = clientSecret
    }
    
    func searchFood(query: String, completion: @escaping (Result<[FatSecretFood], Error>) -> Void) {
        authenticateIfNeeded { result in
            switch result {
            case .success:
                self.performSearch(query: query, completion: completion)
            case .failure(let error):
                completion(.failure(error))
            }
        }
    }
    
    private func authenticateIfNeeded(completion: @escaping (Result<Void, Error>) -> Void) {
        guard accessToken == nil || (tokenExpirationDate ?? Date()) <= Date() else {
            completion(.success(()))
            return
        }
        
        let url = URL(string: "https://oauth.fatsecret.com/connect/token")!
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        
        let loginString = "\(clientID):\(clientSecret)"
        let loginData = loginString.data(using: .utf8)!
        let base64LoginString = loginData.base64EncodedString()
        request.setValue("Basic \(base64LoginString)", forHTTPHeaderField: "Authorization")
        
        let bodyString = "grant_type=client_credentials&scope=basic"
        request.httpBody = bodyString.data(using: .utf8)
        
        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                completion(.failure(error))
                return
            }
            
            guard let data = data else {
                completion(.failure(NSError(domain: "FatSecretAPI", code: 0, userInfo: [NSLocalizedDescriptionKey: "No data received"])))
                return
            }
            
            do {
                if let json = try JSONSerialization.jsonObject(with: data, options: []) as? [String: Any],
                   let accessToken = json["access_token"] as? String,
                   let expiresIn = json["expires_in"] as? TimeInterval {
                    self.accessToken = accessToken
                    self.tokenExpirationDate = Date().addingTimeInterval(expiresIn)
                    completion(.success(()))
                } else {
                    completion(.failure(NSError(domain: "FatSecretAPI", code: 0, userInfo: [NSLocalizedDescriptionKey: "Invalid response format"])))
                }
            } catch {
                completion(.failure(error))
            }
        }
        task.resume()
    }
    
    private func performSearch(query: String, completion: @escaping (Result<[FatSecretFood], Error>) -> Void) {
        guard let accessToken = accessToken else {
            completion(.failure(NSError(domain: "FatSecretAPI", code: 401, userInfo: [NSLocalizedDescriptionKey: "Not authenticated"])))
            return
        }
        
        let urlString = "https://platform.fatsecret.com/rest/server.api"
        var urlComponents = URLComponents(string: urlString)!
        urlComponents.queryItems = [
            URLQueryItem(name: "method", value: "foods.search"),
            URLQueryItem(name: "search_expression", value: query),
            URLQueryItem(name: "format", value: "json")
        ]
        
        var request = URLRequest(url: urlComponents.url!)
        request.httpMethod = "POST"
        request.setValue("Bearer \(accessToken)", forHTTPHeaderField: "Authorization")
        
        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                completion(.failure(error))
                return
            }
            
            guard let data = data else {
                completion(.failure(NSError(domain: "FatSecretAPI", code: 0, userInfo: [NSLocalizedDescriptionKey: "No data received"])))
                return
            }
            
            do {
                if let json = try JSONSerialization.jsonObject(with: data, options: []) as? [String: Any],
                   let foodsSearch = json["foods_search"] as? [String: Any],
                   let results = foodsSearch["results"] as? [String: Any],
                   let foods = results["food"] as? [[String: Any]] {
                    let fatSecretFoods = foods.compactMap { foodData -> FatSecretFood? in
                        guard let foodId = foodData["food_id"] as? String,
                              let foodName = foodData["food_name"] as? String,
                              let servings = foodData["servings"] as? [String: Any],
                              let servingArray = servings["serving"] as? [[String: Any]],
                              let firstServing = servingArray.first,
                              let calories = firstServing["calories"] as? String else {
                            return nil
                        }
                        return FatSecretFood(foodId: foodId, foodName: foodName, calories: Int(calories) ?? 0)
                    }
                    completion(.success(fatSecretFoods))
                } else {
                    completion(.failure(NSError(domain: "FatSecretAPI", code: 0, userInfo: [NSLocalizedDescriptionKey: "Invalid response format"])))
                }
            } catch {
                completion(.failure(error))
            }
        }
        task.resume()
    }
}

struct FatSecretFood {
    let foodId: String
    let foodName: String
    let calories: Int
}
